// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace iree;

// 'SPIR-V Executable'.
file_identifier "SPVE";
file_extension "spve";

// VkSpecializationMapEntry:
//   https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkSpecializationMapEntry.html
//
// Instead of a packed byte buffer we encode each value in its typed form. This
// ensures we don't have endianness or data type size mismatch issues.
//
// Right now we only encode uint32s (or other 4-byte values) as that's the most
// common, however we could add other types (including composite structs like
// vec4). We can also specify well-known system values to substitute such as
// required alignment or shared workspace size.
table VkSpecializationMapEntryDef {
  // ID of the specialization constant in SPIR-V.
  constant_id:uint32;
  // Value of the constant as a 4-byte integer.
  uint32_value:uint32;
}

// VkSpecializationInfo:
//   https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkSpecializationInfo.html
table VkSpecializationInfoDef {
  // A list of specialization constants and their values.
  map_entries:[VkSpecializationMapEntryDef];
}

// A SPIR-V shader module and runtime pipeline layout description.
// This information is used to create the VkShaderModule, VkPipelineLayout, and
// any required VkDescriptorSetLayouts.
table SpirVExecutableDef {
  // Reserved implementation-specific value that can be passed from compiler to
  // runtime.
  tag:string;

  // A map of entry point ordinals to string names as used in the shader module.
  entry_points:[string];

  // SPIR-V code words.
  code:[uint32];

  // Optional specialization constants.
  specialization_info:VkSpecializationInfoDef;
}

root_type SpirVExecutableDef;
